@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
    + {abstract} update():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # strategy:Strategy
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp, Strategy strategy)
    + increaseHp(int increase):void
    + decreaseHp(int decrease):void
    + getHp():int
    + setStrategy(Strategy strategy):void
    + executeStrategy(AbstractAircraft aircraft):List<BaseBullet>
 }


class HeroAircraft {
    - {static} instance:HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp, Strategy strategy)
    + {static} getInstance():HeroAircraft
    + forward():void
    + executeStrategy(AbstractAircraft aircraft):List<BaseBullet>
    + update():void
}

AbstractAircraft <|-- HeroAircraft
HeroAircraft --> HeroAircraft

abstract class BaseEnemy
{
    + BaseEnemy(int locationX, int locationY, int speedX, int speedY, int hp, Strategy strategy)
    + forward():void
    + executeStrategy(AbstractAircraft aircraft):List<BaseBullet>
    + {abstract} dropProp():List<BaseProp>
}

AbstractAircraft <|-- BaseEnemy

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + executeStrategy(AbstractAircraft aircraft):List<BaseBullet>
    + dropProp():List<BaseProp>
    + update():void
}

BaseEnemy <|-- MobEnemy

class EliteEnemy {
    - propFactory:BasePropFactory
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp, Strategy strategy)
    + dropProp():List<BaseProp>
    + update():void
}

BaseEnemy <|-- EliteEnemy

class BossEnemy {
    - propFactory:BasePropFactory
    - propNum:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp, Strategy strategy)
    + forward():void
    + dropProp():List<BaseProp>
    + update():void
}

BaseEnemy <|-- BossEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
    + update():void
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

abstract class BaseProp
{
    # power:int
    + BaseProp(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
    + {abstract} act(AbstractAircraft aircraft, List<BaseBullet> enemyBullets, List<BaseEnemy> enemyAircrafts):void
}

class BloodProp {
    + BloodProp(int locationX, int locationY, int speedX, int speedY, int power)
    + act(AbstractAircraft aircraft, List<BaseBullet> enemyBullets, List<BaseEnemy> enemyAircrafts):void
}

class BulletProp {
    + BulletProp(int locationX, int locationY, int speedX, int speedY, int power)
    + act(AbstractAircraft aircraft, List<BaseBullet> enemyBullets, List<BaseEnemy> enemyAircrafts):void
}

class BombProp {
    - objectList:List<AbstractFlyingObject>
    + BombProp(int locationX, int locationY, int speedX, int speedY, int power)
    + addObject(AbstractFlyingObject object):void
    + removeObject(AbstractFlyingObject object):void
    + notifyAll(boolean active):void
    + act(AbstractAircraft aircraft, List<BaseBullet> enemyBullets, List<BaseEnemy> enemyAircrafts):void
}

BaseProp <|-- BloodProp
BaseProp <|-- BulletProp
BaseProp <|-- BombProp

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

@enduml