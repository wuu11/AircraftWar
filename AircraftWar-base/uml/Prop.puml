@startuml
'https://plantuml.com/class-diagram

interface BasePropFactory {
    + {abstract} createProp(int locationX, int locationY, int speedX, int speedY, int power):BaseProp
}

class BloodPropFactory {
    + createProp(int locationX, int locationY, int speedX, int speedY, int power):BaseProp
}

class BulletPropFactory {
    + createProp(int locationX, int locationY, int speedX, int speedY, int power):BaseProp
}

class BombPropFactory {
    + createProp(int locationX, int locationY, int speedX, int speedY, int power):BaseProp
}

BasePropFactory <|.. BloodPropFactory
BasePropFactory <|.. BulletPropFactory
BasePropFactory <|.. BombPropFactory

abstract class BaseProp {
    # power:int
    + BaseProp(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
    + {abstract} act(AbstractAircraft aircraft, List<BaseBullet> enemyBullets, List<BaseEnemy> enemyAircrafts)
}

class BloodProp {
    + BloodProp(int locationX, int locationY, int speedX, int speedY, int power)
    + act(AbstractAircraft aircraft, List<BaseBullet> enemyBullets, List<BaseEnemy> enemyAircrafts):void
}

class BulletProp {
    + BulletProp(int locationX, int locationY, int speedX, int speedY, int power)
    + act(AbstractAircraft aircraft, List<BaseBullet> enemyBullets, List<BaseEnemy> enemyAircrafts):void
}

class BombProp {
    - objectList:List<AbstractFlyingObject>
    + BombProp(int locationX, int locationY, int speedX, int speedY, int power)
    + addObject(AbstractFlyingObject object):void
    + removeObject(AbstractFlyingObject object):void
    + notifyAll(boolean active):void
    + act(AbstractAircraft aircraft, List<BaseBullet> enemyBullets, List<BaseEnemy> enemyAircrafts):void
}

BaseProp <|-- BloodProp
BaseProp <|-- BulletProp
BaseProp <|-- BombProp

BasePropFactory ..> BaseProp
BloodPropFactory ..> BloodProp
BulletPropFactory ..> BulletProp
BombPropFactory ..> BombProp

@enduml